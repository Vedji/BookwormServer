// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project{
  name: "Bookworm server"
  version: "1.4"
  database_type: "MySQL"
  Note: "База данных для серверной части диплома на тему 'Мобильное приложение 'Книгочей' с функциями персонализации'"
}

// Start default enums
Enum language_codes {
  "UNDEFINED"
  "RU"
  "EN"
}

Enum roles {
  "user" [note: "Просто авторизированный пользователь"]
  "author" [note: "Автор книг"]
  "publisher" [note: "Издатель книг"]
  "administrator" [note: "Администратор"]
}

Enum request_status{
  "pending" [Note: "Тикет ожидает рассмотрения"]
  "approved" [Note: "Тикет рассмотрен и дан, положительный ответ"]
  "rejected" [Note: "Тикет рассмотрен и дан отрицательынй ответ"]
}

Enum file_status{
  "active" [Note: "File is active in s3, his can get file by s3 url"]
  "expired" [Note: "File is expired in s3, his can't get file by s3 url"]
  "deleted" [Note: "File is safe deleted, his can't get from url"]
  "local" [Note: "File store in local server."]
}

Enum personal_list_types {
  "DEFAULT" [Note: "Personal list is to default(Her can't edit, deleted or added to user)."]
  "CREATED" [Note: "Personal list is to added user(Her can edit, deleted or added to user)."]
}

Enum allowed_file_formats{
  "application/x-fictionbook+xml" [note: "FB2 file format"]
  "application/epub+zip" [note: "EPUB file format"]
  "application/pdf" [note: "PDF file format"]
  "text/markdown" [note: "Markdown file format"]
  "image/png" [note: "PNG file format"]
  "image/jpeg" [note: "JPEG file format"]
  "image/gif" [note: "GIF file format"]
  "application/zip" [note: "ZIP file format"]
  "text/plain" [note: "TXT file format"]
  "application/octet-stream" [note: "Unknown file format"]
}

Enum allowed_book_file_formats{
  "application/x-fictionbook+xml" [note: "FB2 file format"]
  "application/epub+zip" [note: "EPUB file format"]
  "text/markdown" [note: "Markdown file format"]
}

Enum password_encryption_type{
  "none" [Note: "Шифрование отсутствует."]
  "bcrypt" [Note: "Шифрование Bcrypt."]
  "sha256" [Note: "Шифрование SHA-256"]
}

Enum support_request_types{
  "request_type_none"
  "request_about_error"
  "request_to_get_author_role"
  "request_to_get_publisher_role"
  "request_to_get_administrator_role"
}

// End default enums


Table languages [Note: "Таблица хранит языковые коды и их описание."]{
  language_code language_codes [
    not null, unique,
    Note: "Языковой код ('en', 'ru' и т.п.), также является идентификатором языка в БД."]
  language_name varchar(50) [not null, Note: 'Название языка']

  Indexes {
    (language_code) [pk]
  }
}


Table files [Note: "Хранит информацию о файлах хранящихся на сервере."]{
  file_id integer [increment, not null, Note: "Индификатор файла с БД."]

  file_key varchar(255) [not null, unique, Note: "Ключ файла в формате S3 (`{file_path}/{file_name}`)."]
  mime_type allowed_file_formats [
    not null,
    default: "application/octet-stream",
    Note: "Mime-тип файла."
  ]

  status file_status [
    null,
    default: "active",
    Note: "Статуст файла (Можно получить по S3 ссылке, храниться в локальном хранилище и т.п.)"
  ]
  bucket_name varchar(64) [null, Note: "Имя бакета S3."]
  s3_url varchar(512) [null, Note: "Прямая ссылка на файл в S3."]
  expires_at timestamp [null, Note: "Время окончания действия ссылки."]

  uploaded_at timestamp [not null, default: `now()`, Note: "Время загрузки файла на сервер."]
  added_user integer [not null, Note: "Id пользователя, добавившего файл."]

  Indexes {
    (file_id) [ pk ]
  }
}
Ref: files.added_user >  users.user_id [Note: "Пользователь может загрузить множество записей."]


// START user group
Table users [
  Note: '''Таблица хранит уникальный индификатор пользователей в системе,
  их никнеймы, роли, время обновления и создания профиля в БД.'''
] {
  user_id integer [increment, not null, Note: "Идентификатор пользователя в системе."]
  username varchar(128) [unique, not null, Note: "Никнейм пользователя."]
  role roles [not null, default: 1, Note: "ID роли пользователя."]
  created_at timestamp [not null, default: `now()`, Note: "Время регистрации пользователя."]
  updated_at timestamp [not null, default: `now()`, Note: "Время последнего обновления профиля."]

  Indexes {
    (user_id) [pk]
    (username)
  }
}

Table user_details [Note: '''Таблица хранить детальную информацию о профиле пользователей.''']{
  user_id integer [not null, Note: "Идентификатор пользователя."]
  description text [null, Note: "Описание профиля пользователя."]
  profile_image_id integer [null, Note: "URL изображения профиля."]

  Indexes {
    (user_id) [pk]
  }
}
Ref: user_details.user_id - users.user_id [Note: "У каждого пользователя может быть только одна запись об описании профиля."]
Ref: user_details.profile_image_id - files.file_id [Note: "Указывает на запись в таблице файлов, которая соответствует аватарки пользователя."]


Table user_credentials [Note: '''Таблица хранит данные для аунтентификации пользователей.'''] {
  user_id integer [not null, Note: "Идентификатор пользователя в БД."]
  email varchar(256) [unique, not null, Note: "Почта пользователя."]
  password_hash varchar(256) [not null, Note: "Зашифрованный пароль пользователя."]
  password_encryption password_encryption_type [not null, default: "none", Note: "Тип шифрования пароля."]
  password_updated_at timestamp [not null, default: `now()`, Note: "Когда пароль был обновлен в последний раз."]

  Indexes {
    (user_id) [pk]
    (email)
  }
}
Ref: user_credentials.user_id - users.user_id [Note: "Для одного пользователя, может существоватьь только одна запись об его аунтификационных данных."]


Table user_login_attempts [Note: "Логи попыток вход пользователей."] {
  // Объеденить логи в одну таблицу с подтаблицами для разных категорий.
  attempt_id integer [increment, not null, Note: "Идентификатор попытки входа."]
  user_id integer [not null, Note: "Идентификатор пользователя."]
  attempt_at timestamp [not null, default: `now()`, Note: "Время попытки входа."]
  success boolean [not null, Note: "Успешность попытки входа."]
  ip_address varchar(45) [not null, Note: "IP-адрес, с которого совершена попытка."]

  Indexes {
    (attempt_id) [pk]
    (user_id)
  }
}
Ref: user_login_attempts.user_id > users.user_id [delete: cascade, Note: "Связь попытки входа с пользователем."]

  // START Bookmarks group
  Table user_bookmarks [Note: "Таблица хранить закладки пользователей в книгах."]{
    bookmarkd_id integer [pk, not null, increment, Note: "Идентификатор книжной закладки."]
    user_id integer [not null, ref: - users.user_id, Note: "Идентификатор пользователя."]
    book_id integer [not null, ref: - books.book_id, Note: "Идентификатор книги."]
    bookmark bigint [not null, default: 0, Note: "Позиция в тексте"]
    book_file_type allowed_book_file_formats [not null, Note: "Тип файла книги, к которому относиться закладка."]

    created_at timestamp [not null, default: `now()`, Note: "Время создания закладки."]

    Indexes {
      ( user_id, book_id ) [ unique ]
    }
  }

  Table bookmark_epub [Note: "Таблица закладок для книг в формате `EPUB`."]{
    bookmark_id integer [
      not null, ref: - user_bookmarks.bookmarkd_id,
      Note: "Идентификатор закладки, к которой относится запись."]
    location varchar(255) [not null, Note: "Указатель на заготовок в `EPUB`."]
  }

  Table bookmark_fb2 [Note: "Таблица закладок для книг в формате `FB2`."]{
    bookmark_id integer [
      not null, ref: - user_bookmarks.bookmarkd_id,
      Note: "Идентификатор закладки, к которой относится запись."]
    position bigint [not null, Note: "Позиция в тексте на закладку."]
  }

  Table bookmark_markdown [Note: "? Таблица закладок для книг в формате `Markdown`."]{
    bookmark_id integer [
      not null, ref: - user_bookmarks.bookmarkd_id,
      Note: "Идентификатор закладки, к которой относится запись."]
    heading TEXT [not null, Note: "Указатель на заголовок."]
  }
  // END Bookmarks group

Table user_personal_lists [
  Note:
  '''
    Таблица описывает персональные списки пользователей для произведений.
     При создании нового пользователя, у него должны быть сгенерированы
     списки по умолчанию, в зависимости от языкового кода:
     + Читаю (Reading)
     + В планах (Plans)
     + Брошено (Dropped)
     + Прочитано (Read)
     + Любимое (Likes)
     '''
  ] {
    personal_list_id integer [
      pk, not null, increment,
      Note: "Идентификатор пользовательского списка."]

    user_id integer [
      not null, Note: "Идентификатор пользователя которому принадлежит этот список."]

    list_name varchar(32) [not null, Note: "Название персонального списка."]
    list_type personal_list_types [
      not null,
      Note: "Может ли пользователь редактировать этот список"
    ]

    updated_at timestamp [not null, default: `now()`, Note: "Время обновления пользовательского списка."]
    created_at timestamp [not null, default: `now()`, Note: "Время создания пользовательского списка."]

    Indexes {
      (user_id, list_name) [unique]
    }
}
Ref: user_personal_lists.user_id > users.user_id

Table user_personal_list_items [
  Note: "Таблица хранить записи о добавленных книгах в пользовательские списки."
]{
  personal_list_id integer [
    not null, ref: > user_personal_lists.personal_list_id,
    Note: "Идентификатор пользовательского списка."]
  book_id integer [
    not null, ref: > books.book_id,
    Note: "Идентификатор книги."]
  added_at timestamp [not null, default: `now`, Note: "Время добавления книги в пользовательский список."]

  Indexes {
    (personal_list_id, book_id) [pk, unique]
  }
}

// END user group


// START requests group

Table support_requests [
  Note: "Таблица общих заявок пользователей на поддержку."
] {
  ticked_id integer [
    increment, not null,
     Note: "Индификатор заявки в поддержку."]

  support_request_type support_request_types [
    not null, default: "request_type_none",
    Note: "Тип запроса в поддержку."]

  status request_status [
    not null, default: "pending",
     Note: "Статус запроса к поддержки."]
  reviewed_at timestamp [
    null, note: 'Время рассмотрения заявки.']

  subject varchar(255) [      // Move to different table
    not null, note: 'Тема запроса']
  message text [              // Move to different table
    not null, note: 'Сообщение запроса']

  user_id integer [
    not null,
    Note: "Индификатор пользователя, который оставил заявку."
  ]

  moderator_comment text [null, Note: "Ответ модератора."]
  reviewed_user_id integer [
    not null,
    Note: "Индификатор пользователя, который рассмотрел заявку."
  ]

  Indexes {
    (ticked_id) [pk]
  }
}
Ref: support_requests.user_id > users.user_id [
  Note: "Внешний ключ на таблицу `users`, для пользователя оставившего заявку."]
Ref: support_requests.reviewed_user_id > users.user_id [
  Note: "Внешний ключ на таблицу `users`, для пользователя рассмотревшего заявку."]


Table requests_to_get_role_author [
  Note: "Таблица запросов на получение роли автора контента."
]{
  ticked_id integer [not null, Note: "Индификатор заявки в поддержку."]

  first_name varchar(255) [not null, Note: "Имя автора."]
  last_name varchar (255) [not null, Note: "Фамилия автора."]
  contact_email varchar(255) [not null, Note: "Почтовый адрес автора."]
  website varchar(1024) [null, Note: "Ссылка на персональный сайт автора (Если есть)."]
  birthday timestamp [not null, Note: "Дата рождения пользователя."]
  nationaly varchar(255) [not null, Note: "национальность автора."]
  description text [not null, Note: "Пара слов о авторе."]

  Indexes {
    (ticked_id) [pk]
  }
}
Ref: requests_to_get_role_author.ticked_id - support_requests.ticked_id [
  Note: "Связь 1-1"]


Table requests_to_get_role_publisher [
  Note: "Таблица запросов на получение роли издателя контента."
]{
  ticked_id integer [not null, Note: "Идентификатор заявки в поддержку."]

  publisher_name varchar(255) [not null, Note: "Название издателя."]
  website varchar(1024) [null, Note: "Ссылка на персональный сайт издателя (Если есть)."]
  contact_email varchar(255) [not null, Note: "Почтовый адрес издателя."]
  contact_phone varchar(50) [not null, Note: "Телефонный номер для связи с издателем."]
  founded_year YEAR [not null, Note: "Дата основания издательства."]
  description text [not null, Note: "Описание издательства."]

  Indexes {
    (ticked_id) [pk]
  }
}
Ref: requests_to_get_role_publisher.ticked_id - support_requests.ticked_id

// END requests group


// START authors group
table author_curators [Note: "-> Таблица хранить курирующие аккаунты для авторов книг."]{
  author_curator_id integer [pk, not null, increment, Note: "Уникальный идентификатор таблицы."]
  account_id integer [ref: - users.user_id, not null, Note: "Идентификатор курирующего пользователя."]
  author_id integer [ref: - authors.author_id, Note: "Идентификатор профиля автора."]
}

Table authors [Note: " -> Таблица хранит информацию об авторах книг."]{
  author_id integer [pk, not null, increment, Note: "Идентификатор автора."]
  first_name varchar(255) [not null, Note: "Имя автора."]
  last_name varchar(255) [not null, Note: "Фамилия автора."]
  contact_email varchar(255) [null, Note: "Контактная почта для автора."]
  website varchar(1024) [null, Note: "Веб-сайт автора."]
  birthday timestamp [not null, Note: "Дата рождения автора."]
  nationaly varchar(255) [null, Note: "Место рождения автора."]
  description text [not null, Note: "Описание профиля автора."]
}

Table book_authors [Note: " -> Таблица хранит список книг, которые опубликованы авторами."] {
  book_id integer [ref: > books.book_id, Note: "Идентификатор книги."]
  author_id integer [ref: > authors.author_id, Note: "Идентификатор автора."]
}
// END authors group


// START publishers group
Table publishers [Note: " -> Таблица хранить профили издателей."]{
  publisher_id integer [pk, not null, increment, Note: "Уникальный идентификатор издателя."]
  name varchar(255) [not null, Note: "Название издательства."]
  website varchar(1024) [not null, Note: "Веб-сайт издательства."]
  contact_email varchar(255) [not null, Note: "Контактный почтовый адрес издательства."]
  phone varchar(50) [not null, Note: "Контактный телефон издательства."]
  founded_year YEAR [not null, Note: "Дата основания издательства."]
  description text [not null, Note: "Описания профиля издательства."]
  created_at timestamp [not null, Note: "Дата создания издательства в БД."]

}

Table publisher_curators [Note: "Кураторы издательства."]{
  publisher_curator_id integer [pk, not null, increment, Note: "Уникальный идентификатор куратора."]
  account_id integer [ref: - users.user_id, not null, Note: "Идентификатор курирующего пользователя."]
  publisher_id integer [ref: - publishers.publisher_id, Note: "Идентификатор издательства."]
}

Table book_publishers [Note: "Таблица хранить книги, которые опубликовали авторы."]{
  publisher_id integer [ref: > publishers.publisher_id, Note: "Идентификатор издательства."]
  book_id integer [ref: > books.book_id, Note: "Идентификатор книги."]
}
// END publishers group


// START books group
// START book genres group
Table genres [Note: "Таблица хранит список доступных жанров."]{
  genre_id integer [increment, not null, Note: "Идентификатор жанра."]

  Indexes {
    (genre_id) [pk]
  }
}


Table book_genres [Note: "Таблица ассоциаций между книгами и жанрами."]{
  book_id integer [not null, Note: "Идентификатор книги."]
  genre_id integer [not null, Note: "Идентификатор жанра."]

  Indexes {
    (book_id, genre_id) [pk]
  }
}
Ref: book_genres.book_id > books.book_id [Note: "Внешний ключ на идентификатор книги."]
Ref: book_genres.genre_id > genres.genre_id [Note: "Внешний ключ на идентификатор жанра."]


Table genre_translations [Note: "Таблица хранит описание жанров."]{
  genre_id integer [not null, Note: "Идентификатор жанра. "]
  language_code language_codes [not null, note: 'Идентификатор языка. ']
  genre_name varchar(255) [not null, Note: "Название жанра. "]

  indexes {
    (genre_id, language_code) [unique, pk]
  }
}
Ref: genre_translations.genre_id > genres.genre_id [ Note: "Внешний ключ для ассоциации с жанрами." ]
Ref: genre_translations.language_code > languages.language_code [ Note: "Внешний ключ отражающий код языка." ]
// END book genres group

Table books [Note: "Таблица хранит основную информацию о книгах."]{
  book_id integer [increment, not null, Note: "Идентификатор книги."]

  book_publication_date date [null, Note: "Дата публикации книги."]

  book_content integer [null, Note: "Идентификатор файла, указывающий на файл, в котором содержиться содержимое книги."]
  book_content_type allowed_book_file_formats [not null, Note: "В каком формате загружено содержимое книги."]

  book_isbn varchar(14) [null, Note: "ISBN код книги без разделителей."]

  added_user integer [not null, Note: "Идентификатор пользователя, который добавил книгу."]
  updated_at timestamp [not null, default: `now()`, Note: "Когда книга была обновлена в последний раз."]
  created_at timestamp [not null, default: `now()`, Note: "Когда книга была записана в систему."]

  Indexes {
    (book_id) [pk]
  }
}
Ref: books.added_user > users.user_id [ Note: "Внешний ключ указывающий на пользователя, добавившего произведение." ]
Ref: books.book_content - files.file_id [ Note: "Внешний ключ указывающий на файл книги." ]

Table book_preview_images [Note: "Таблица хранит списки превью изображений для книг."]{
  book_id integer [pk, not null, Note: "Идентификатор книги."]
  file_id integer [not null, Note: "Идентификатор изображения."]

  content_description varchar(128) [null, default: "Описание изображения отсутствует.", Note: "Описание изображения."]
  created_at timestamp [not null, default: `now()`, Note: "Когда книга была записана в систему."]

  Indexes {
    (book_id, file_id) [unique]
  }
}
Ref: books.book_id < book_preview_images.book_id [Note: "Указатель на книгу."]
Ref: files.file_id < book_preview_images.file_id [Note: "Указатель на файл."]


Table book_translations [Note: "Таблица хранить локализации названия и описания книги."] {
  // books_localization_id [pk, not null, increment]
  book_id integer [not null, Note: "Идентификатор книги."]
  language_code language_codes [not null, Note: 'Идентификатор локализации.']

  book_title varchar(256) [not null, Note: "Название произведения."]
  book_description text [null, Note: "Локализация описания книги."]

  Indexes {
    (book_id, language_code) [pk, unique]
  }
}
Ref: book_translations.book_id > books.book_id
Ref: book_translations.language_code > languages.language_code


Table book_ratings [Note: "Таблица хранить пользовательские оценки для книг."]{
  user_id integer [not null, Note: "Идентификатор пользователя."]
  book_id integer [not null, Note: "Идентификатор книги."]
  rating tinyint [
    not null, default: 0,
    Note: 'Пользовательская оценка, должно соответствовать условию: `CHECK (rating >= 0 AND rating <= 5)`.']

  created_at timestamp [not null, default: `now()`, Note: "Когда была поставлена оценка."]

  Indexes {
    (user_id, book_id) [pk, unique]
  }
}
Ref: users.user_id - book_ratings.user_id
Ref: books.book_id - book_ratings.book_id

Table book_comments [Note: "Таблица хранит пользовательские комментарии к книгам."]{
  // TODO: Add user relationship
  user_id integer [not null, Note: "Идентификатор пользователя."]
  book_id integer [not null, Note: "Идентификатор книги."]
  language_code language_codes [not null, Note: 'Отвечает за локализацию.']

  message text [not null, Note: "Содержимое комментария."]

  Indexes {
    (user_id, book_id) [pk, unique]
  }
}
Ref: users.user_id < book_comments.user_id
Ref: books.book_id < book_comments.book_id
Ref: languages.language_code < book_comments.language_code
// END books group

Table book_forum_questions [
  Note: '''Таблица хранит вопросы к книгам (в формате вопрос-ответы). '''
]{
  forum_id integer [not null, Note: "Идентификатор форума."]
  book_id integer [not null, Note: "Идентификатор книги, к которой относится вопрос."]

  is_open bool [not null, default: false, Note: "Открыто ли обсуждение?"]
  title varchar(256) [not null, Note: "Заголовок вопроса."]
  question_message text [null, Note: "Текст вопроса."]

  added_user integer [not null, Note: "Пользователь, который добавил этот вопрос."]
  created_at timestamp [not null, default: `now()`, Note: "Время ссоздания вопроса."]

  Indexes {
    forum_id [pk]
  }
}
Ref: book_forum_questions.book_id > books.book_id
Ref: book_forum_questions.added_user > users.user_id

Table book_forum_answers [Note: "Таблица ответов к вопросам."] {
  answer_id integer [not null, Note: "Идентификатор ответа."]
  forum_id integer [not null, Note: "Идентификатор вопроса, к которому относится этот ответ."]

  message text [not null, Note: "Сообщение ответа."]

  added_user integer [not null, Note: "Пользователь, который оставил этот ответ."]
  created_at timestamp [not null, default: `now()`, Note: "Время, когда был оставлен этот ответ."]

  Indexes {
    answer_id [pk]
  }
}
Ref: book_forum_answers.forum_id > book_forum_questions.forum_id
Ref: book_forum_answers.added_user > users.user_id