// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Project{
  name: "Bookworm server"
  version: "1.4"
  database_type: "MySQL"
  Note: "База данных для серверной части диплома на тему 'Мобильное приложение 'Книгочей' с функциями персонализации'"
}

// Start default enums
Enum language_codes {
  "none"
  "ru"
  "en"
}

Enum roles {
  "user" [note: "Просто авторизированный пользователь"]
  "author" [note: "Автор книг"]
  "publisher" [note: "Издатель книг"]
  "administrator" [note: "Администратор"]
}

Enum request_status{
  "pending" [Note: "Тикет ожидает рассмотрения"]
  "approved" [Note: "Тикет рассмотрен и дан, положительный ответ"]
  "rejected" [Note: "Тикет рассмотрен и дан отрицательынй ответ"]
}

Enum file_status{
  "active" [Note: "File is active in s3, his can get file by s3 url"]
  "expired" [Note: "File is expired in s3, his can't get file by s3 url"]
  "deleted" [Note: "File is safe deleted, his can't get from url"]
  "local" [Note: "File store in local server."]
}

Enum personal_list_status{
  "default" [Note: "Personal list is to default(Her can't edit, deleted or added to user)."]
  "created" [Note: "Personal list is to added user(Her can edit, deleted or added to user)."]
}

Enum allowed_file_formats{
  "application/x-fictionbook+xml" [note: "FB2 file format"]
  "application/epub+zip" [note: "EPUB file format"]
  "application/pdf" [note: "PDF file format"]
  "text/markdown" [note: "Markdown file format"]
  "image/png" [note: "PNG file format"]
  "image/jpeg" [note: "JPEG file format"]
  "image/gif" [note: "GIF file format"]
  "application/zip" [note: "ZIP file format"]
  "text/plain" [note: "TXT file format"]
  "application/octet-stream" [note: "Unknown file format"]
}

Enum allowed_book_file_formats{
  "application/x-fictionbook+xml" [note: "FB2 file format"]
  "application/epub+zip" [note: "EPUB file format"]
  "text/markdown" [note: "Markdown file format"]
}

Enum password_encryption_type{
  "none" [Note: "Шифрование отсутствует."]
  "bcrypt" [Note: "Шифрование Bcrypt."]
  "sha256" [Note: "Шифрование SHA-256"]
}
// End default enums


Table languages [Note: "Таблица хранит языковые коды и их описание."]{
  language_id integer [increment, not null, Note: "Индификатор языка в БД."]
  language_code language_codes [not null, unique, note: "Языковой код ('en', 'ru' и т.п.)"]
  language_name varchar(50) [not null, note: 'Название языка']

  Indexes {
    (language_id) [pk]
  }
}


Table files [Note: "Хранит информацию о файлах хранящихся на сервере."]{
  file_id integer [increment, not null, Note: "Индификатор файла с БД."]

  file_key varchar(255) [not null, unique, Note: "Ключ файла в формате S3 (`{file_path}/{file_name}`)."]
  mime_type allowed_file_formats [
    not null,
    default: "application/octet-stream",
    Note: "Mime-тип файла."
  ]

  status file_status [
    null,
    default: "active",
    Note: "Статуст файла (Можно получить по S3 ссылке, храниться в локальном хранилище и т.п.)"
  ]
  bucket_name varchar(64) [null, Note: "Имя бакета S3."]
  s3_url varchar(512) [null, Note: "Прямая ссылка на файл в S3."]
  expires_at timestamp [null, Note: "Время окончания действия ссылки."]

  uploaded_at timestamp [not null, default: `now()`, Note: "Время загрузки файла на сервер."]
  added_user integer [not null, Note: "Id пользователя, добавившего файл."]

  Indexes {
    (file_id) [ pk ]
  }
}
Ref: files.added_user >  users.user_id [Note: "Пользователь может загрузить множество записей."]


// START user group
Table users {
  user_id integer [increment, not null, Note: "Идентификатор пользователя в системе."]
  username varchar(128) [unique, not null, Note: "Никнейм пользователя."]
  role roles [not null, default: 1, Note: "ID роли пользователя."]
  created_at timestamp [not null, default: `now()`, Note: "Время регистрации пользователя."]
  updated_at timestamp [not null, default: `now()`, Note: "Время последнего обновления профиля."]

  Indexes {
    (user_id) [pk]
    (username)
  }
}

Table user_details {
  user_id integer [not null, Note: "Идентификатор пользователя."]
  description text [null, Note: "Описание профиля пользователя."]
  profile_image_id integer [null, Note: "URL изображения профиля."]

  Indexes {
    (user_id) [pk]
  }
}
Ref: user_details.user_id - users.user_id [Note: "У каждого пользователя может быть только одна запись об описании профиля."]
Ref: user_details.profile_image_id - files.file_id [Note: "Указывает на запись в таблице файлов, которая соответствует аватарки пользователя."]


Table user_credentials {
  user_id integer [not null, Note: "Идентификатор пользователя в БД."]
  email varchar(256) [unique, not null, Note: "Почта пользователя."]
  password_hash varchar(256) [not null, Note: "Зашифрованный пароль пользователя."]
  password_encryption ENUM("none", "bcrypt", "argon2", "scrypt") [not null, default: "none", Note: "Тип шифрования пароля."]
  password_updated_at timestamp [not null, default: `now()`, Note: "Когда пароль был обновлен в последний раз."]

  Indexes {
    (user_id) [pk]
    (email)
  }
}
Ref: user_credentials.user_id - users.user_id [Note: "Для одного пользователя, может существоватьь только одна запись об его аунтификационных данных."]


Table user_login_attempts [Note: "Логи попыток вход пользователей."] {
  attempt_id integer [increment, not null, Note: "Идентификатор попытки входа."]
  user_id integer [not null, Note: "Идентификатор пользователя."]
  attempt_at timestamp [not null, default: `now()`, Note: "Время попытки входа."]
  success boolean [not null, Note: "Успешность попытки входа."]
  ip_address varchar(45) [not null, Note: "IP-адрес, с которого совершена попытка."]

  Indexes {
    (attempt_id) [pk]
    (user_id)
  }
}
Ref: user_login_attempts.user_id > users.user_id [delete: cascade, Note: "Связь попытки входа с пользователем."]

  // START Bookmarks group
  Table user_bookmarks {
    bookmarkd_id integer [pk, not null, increment]
    user_id integer [not null, ref: - users.user_id]
    book_id integer [not null, ref: - books.book_id]
    bookmark bigint [not null, default: 0]
    book_file_type allowed_book_file_formats [not null]

    created_at timestamp [not null, default: `now()`]

    Indexes {
      ( user_id, book_id ) [ unique ]
    }
  }

  Table bookmark_epub{
    bookmark_id integer [not null, ref: - user_bookmarks.bookmarkd_id]
    location varchar(255) [not null]
  }

  Table bookmark_fb2{
    bookmark_id integer [not null, ref: - user_bookmarks.bookmarkd_id]
    position integer [not null]
  }

  Table bookmark_markdown{
    bookmark_id integer [not null, ref: - user_bookmarks.bookmarkd_id]
    heading TEXT [not null]
  }
  // END Bookmarks group

Table user_personal_lists [
  note:
  '''
    Таблица описывает персональные списки пользователей для произведений.
     При создании нового пользователя, у него должны быть сгенерированы
     списки по умолчанию, в зависимости от языкового кода:
     + Читаю (Reading)
     + В планах (Plans)
     + Брошено (Dropped)
     + Прочитано (Readed)
     + Любимое (Likes)
     '''
  ] {
    user_id integer [ref: > users.user_id]
    personal_list_id integer [pk, not null, increment]
    list_name varchar(32) [not null]
    list_type personal_list_status [
      not null,
      note: "Может ли пользователь редактировать этот список"
    ]

    Indexes {
      (user_id, list_name) [unique]
    }
}

Table user_personal_lists_items{
  personal_list_id integer [ref: > user_personal_lists.personal_list_id]
  book_id integer [ref: > books.book_id]
}

// END user group


// START requests group
Table author_requests [
  note: '''Таблица тикетов для администратора на становления автором контента'''
]{
  author_requests_id integer [pk, increment, not null]
  user_id integer [ref: > users.user_id, not null]
  status request_status [default: 'pending']
  reviewed_at timestamp [null, note: 'Время рассмотрения заявки']
  reviewed_user_id integer [ref: > users.user_id, not null]
}

Table publisher_requests [
  note: '''Таблица тикетов для администратора на становления издателем контента'''
]{
  publisher_requests_id integer [pk, increment, not null]
  user_id integer [ref: > users.user_id, not null]
  status request_status [default: 'pending']
  reviewed_at timestamp [null, note: 'Время рассмотрения заявки']
  reviewed_user_id integer [ref: > users.user_id, not null]
}

Table support_requests [
  note:  '''Таблица тикетов для администратора содержащия сообщения об ошибках и т.п.'''
]{
  support_requests_id integer [pk, increment, not null]
  user_id integer [ref: > users.user_id, not null]
  status request_status [default: 'pending']
  reviewed_at timestamp [null, note: 'Время рассмотрения заявки']
  reviewed_user_id integer [ref: > users.user_id, not null]
  subject varchar(255) [not null, note: 'Тема запроса']
  message text [not null, note: 'Сообщение запроса']
}
// END requests group


// START authors group
table author_curators{
  author_curator_id integer [pk, not null, increment]
  account_id integer [ref: - users.user_id, not null]
  author_id integer [ref: - authors.author_id]
}

Table authors{
  author_id integer [pk, not null, increment]
  first_name varchar(255)
  last_name varchar(255)
  contact_email varchar(255) [not null]
  website varchar(1024) [not null]
  birthday timestap [not null]
  nationaly varchar(255) [null]
  description text [not null]
}

Table book_authors {
  book_id integer [ref: > books.book_id]
  author_id integer [ref: > authors.author_id]
}
// END authors group


// START publishers group
Table publishers {
  publisher_id integer [pk, not null, increment]
  name varchar(255) [not null]
  website varchar(1024) [not null]
  contact_email varchar(255) [not null]
  phone varchar(50) [not null]
  founded_year YEAR [not null]
  description text [not null]
  created_at timestamp [not null]

}

Table publisher_curators{
  publisher_curator_id integer [pk, not null, increment]
  account_id integer [ref: - users.user_id, not null]
  publisher_id integer [ref: - publishers.publisher_id]
}

Table book_publishers{
  publisher_id integer [ref: > publishers.publisher_id]
  book_id integer [ref: > books.book_id]
}
// END publishers group


// START books group
// START book genres group
Table genres [Note: "Таблица хранит список доступных жанров."]{
  genre_id integer [increment, not null, Note: "Индификатор жанра."]

  Indexes {
    (genre_id) [pk]
  }
}


Table book_genres [Note: "Таблица ассоциаций между книгами и жанрами."]{
  book_id integer [not null, Note: "Индификатор книги."]
  genre_id integer [not null, Note: "Индификатор жанра."]

  Indexes {
    (book_id, genre_id) [pk]
  }
}
Ref: book_genres.book_id > books.book_id [Note: "Внешний ключ на индификатор книги."]
Ref: book_genres.genre_id > genres.genre_id [Note: "Внешний ключ на индификатор жанра."]


Table genres_translations [Note: "Таблица хранит описание жанров."]{
  genre_id integer [not null, Note: "Индификатор жанра. "]
  language_id integer [not null, note: 'Индификатор языка. ']
  genre_name varchar(255) [not null, Note: "Название жанра. "]

  indexes {
    (genre_id, language_id) [unique, pk]
  }
}
Ref: genres_translations.genre_id > genres.genre_id [ Note: "Внешний ключ для ассоциации с жанрами." ]
Ref: genres_translations.language_id > languages.language_id [ Note: "Внешний ключ отражающий код языка." ]
// END book genres group

Table books [Note: "Таблица описывающая произведения."]{
  book_id integer [increment, not null, Note: "Индификатор книги."]

  book_publication_date date [null, Note: "Дата публикации книги."]

  book_content integer [not null, Note: "Индификатор файла, указывающий на файл, в котором содержиться содержимое книги."]
  book_file_type allowed_book_file_formats [not null, Note: "В каком формате загружено содержимое книги."]

  added_user integer [ Note: "Индификатор пользователя, который добавил книгу."]

  Indexes {
    (book_id) [pk]
  }
}
Ref: books.added_user > users.user_id [ Note: "Внешний ключ указывающий на пользователя, добавившего произведение." ]
Ref: books.book_content - files.file_id [ Note: "Внешний ключ указывающий на файл книги." ]


Table book_translations {
  // books_localization_id [pk, not null, increment]
  book_id integer [ref: - books.book_id, not null]
  language_id integer [not null, ref: > languages.language_id, note: 'Отвечает за локализацию']
  book_description text [null]
  book_title text [not null]

}

Table book_rating{
  rating_id integer [pk, not null, increment]
  user_id integer [not null, ref: - users.user_id]
  book_id integer [not null, ref: - books.book_id]
  rating integer [not null, default: 0, note: 'CHECK (rating >= 0 AND rating <= 5)']

  Indexes {
    (user_id, book_id) [unique]
  }
}

Table book_comments{
  comment_id integer [pk, not null, increment]
  book_id integer [ref: > books.book_id]
  language_id integer [not null, ref: > languages.language_id, note: 'Отвечает за локализацию']
  message text [not null]
}
// END books group